FROM node:18.17.0 AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
RUN rm -f /etc/apt/apt.conf.d/docker-clean
RUN --mount=type=cache,target=/var/cache/apt apt update && \
  apt install -y --no-install-recommends git-all && \
  rm -rf /var/lib/apt/lists/*
RUN echo PS1="'"'\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '"'" >> /etc/profile
RUN echo alias ls="'"'ls --color=auto'"'" >> /etc/profile
WORKDIR /app
RUN chown -R node:node /app
USER node
COPY package.json pnpm-lock.yaml tsconfig.json ./
COPY prisma ./prisma

FROM base AS prod-build
USER node
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm fetch --frozen-lockfile
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
COPY . .
RUN pnpm prisma:generate
RUN pnpm build

FROM base AS prod-dependencies
USER node
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm fetch --prod --frozen-lockfile
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile
RUN pnpm prisma:generate

FROM base AS gha
USER node
COPY --from=prod-build /app/dist /app/dist
COPY --from=prod-dependencies /app/node_modules /app/node_modules
ENV NODE_ENV=gha
CMD [ "pnpm", "start:prod" ]

FROM base AS staging
USER node
COPY --from=prod-build /app/dist /app/dist
COPY --from=prod-dependencies /app/node_modules /app/node_modules
ENV NODE_ENV=staging
CMD [ "pnpm", "start:prod" ]

FROM base AS prod
USER node
COPY --from=prod-build /app/dist /app/dist
COPY --from=prod-dependencies /app/node_modules /app/node_modules
ENV NODE_ENV=production
CMD [ "pnpm", "start:prod" ]